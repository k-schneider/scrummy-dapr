<button type="@Type" @onclick="HandleOnClick" disabled="@Disabled" class="flex justify-center items-center space-x-2 text-lg font-bold py-2 px-6 border-b-4 active:mt-1 active:border-b-0 rounded-lg shadow-md disabled:opacity-80 disabled:border-b-4 disabled:mt-0 @ClassList">
    @if (ChildContent != default)
    {
        @if (NoSpanWrap)
        {
            @ChildContent
        }
        else
        {
            <span>@ChildContent</span>
        }
    }
    @if (Loading)
    {
        <Icon Type="circle-notch" Spin="true" Class="@(string.IsNullOrEmpty(IconSize) ? null : $"text-{IconSize}")" />
    }
    else if (!string.IsNullOrEmpty(Icon))
    {
        <Icon Type="@Icon" Style="@IconStyle" Class="@(string.IsNullOrEmpty(IconSize) ? null : $"text-{IconSize}")" />
    }
</button>

@code {
    private const string DefaultVariant = "default";
    private string ClassList = string.Empty;

    private static Dictionary<string, string> VariantClasses = new()
    {
        { "default", "bg-orange-600 text-slate-200 border-orange-800 hover:bg-orange-500 hover:border-orange-700 disabled:bg-orange-600 disabled:border-orange-800" },
        { "light", "bg-orange-400 text-slate-800 border-orange-500 hover:bg-orange-300 hover:border-orange-400 disabled:bg-orange-400 disabled:border-orange-500" },
        { "special", "bg-amber-600 text-slate-200 border-amber-800 hover:bg-amber-500 hover:border-amber-700 disabled:bg-amber-600 disabled:border-amber-800" }
    };

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string? Variant { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public bool Block { get; set; }

    [Parameter]
    public bool Loading { get; set; }

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public string? Icon { get; set; }

    [Parameter]
    public string? IconSize { get; set; } = "2xl";

    [Parameter]
    public string? IconStyle { get; set; }

    [Parameter]
    public bool NoSpanWrap { get; set; }

    [Parameter]
    public string Type { get; set; } = "button";

    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        BuildClassList();
    }

    private async Task HandleOnClick(MouseEventArgs args)
    {
        if (OnClick.HasDelegate)
        {
            await OnClick.InvokeAsync(args);
        }
    }

    private void BuildClassList()
    {
        var classList = new List<string>();

        var variant = Variant;
        if (string.IsNullOrEmpty(variant) || !VariantClasses.ContainsKey(variant))
        {
            variant = DefaultVariant;
        }
        classList.Add(VariantClasses[variant]);

        if (Block)
        {
            classList.Add("block w-full");
        }

        if (!string.IsNullOrEmpty(Class))
        {
            classList.Add(Class);
        }

        ClassList = string.Join(' ', classList);
    }
}
