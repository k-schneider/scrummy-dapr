@inherits FluxorComponent
@inject IDispatcher Dispatcher
@inject IState<LobbyState> LobbyState;

<PageTitle>Scrummy - New Game</PageTitle>

<div class="grid place-items-center h-screen">
    <div class="bg-white rounded-lg shadow-xl px-4 py-5 flex flex-col gap-4">
        <h1 class="text-xl leading-6 font-medium text-gray-900 text-center">Welcome to Scrummy</h1>
        <div>
            <label for="nickname" class="text-gray-500">Choose a nickname:</label>
            <Input Id="nickname" Name="nickname" @bind-Value="Nickname" MaxLength="50" Block="true" Placeholder="Enter your nickname" />
        </div>
        <div>
            <label for="deck" class="text-gray-500">Select a card deck:</label>
            <Select Id="deck" @bind-Value="DeckId" Block="true">
                <Option Value="">Select a deck...</Option>
                @foreach (var deck in NamedDecks.All)
                {
                    <Option Value="@deck.Id">@deck.Name</Option>
                }
            </Select>
        </div>
        <Button OnClick="Continue" Icon="dice" Block="true" Disabled="@LobbyState.Value.CreatingGame" Loading="@LobbyState.Value.CreatingGame">Create Game</Button>
    </div>
</div>

@code {
    private string Nickname = string.Empty;
    private string DeckId = string.Empty;

    protected override Task OnInitializedAsync()
    {
        Nickname = LobbyState.Value.Nickname;
        DeckId = NamedDecks.All.First().Id;
        return base.OnInitializedAsync();
    }

    private void Continue()
    {
        if (string.IsNullOrWhiteSpace(Nickname) || string.IsNullOrEmpty(DeckId))
        {
            return;
        }

        var deck = NamedDecks.All.First(d => d.Id == DeckId).Cards;

        Dispatcher.Dispatch(new CreateGameAction(Nickname, deck));
    }
}
