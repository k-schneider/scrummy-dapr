@inherits FluxorComponent
@inject IState<GameState> GameState
@inject IJSRuntime JSRuntime

<div class="flex flex-col gap-8 sm:gap-16 items-center">
    <div class="grid grid-cols-4 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <ResultsStatistic Label="Min" Value="@Min" />
        <ResultsStatistic Label="Max" Value="@Max" />
        <ResultsStatistic Label="Average" Value="@Average" />
        <ResultsStatistic Label="Popular" Value="@Popular" />
    </div>
    @if (Votes.Any())
    {
        <div class="w-full px-16 sm:p-0 lg:w-96 md:w-80 sm:w-72 overflow-hidden">
            <canvas id="@WrapperElementId"></canvas>
        </div>
    }
    else
    {
        <p class="text-center text-white text-lg font-semibold">No votes to tally!</p>
    }
</div>

@code {
    private string WrapperElementId = Guid.NewGuid().ToString();
    private Dictionary<string, int> Votes = new();
    private string Min = "-";
    private string Max = "-";
    private string Average = "-";
    private string Popular = "-";

    protected override Task OnInitializedAsync()
    {
        var parsedVotes = GameState.Value.Votes.Select(v => v.Value)
            .GroupBy(v => v)
            .Select(g => new { Value = g.Key!, Count = g.Count() })
            .Select(v => {
                int? numericValue = int.TryParse(v.Value, out int i) ? (int?)i : null;
                return new { StringValue = v.Value, NumericValue = numericValue, Count = v.Count };
            })
            .OrderByDescending(x => x.NumericValue.HasValue)
            .ThenBy(x => x.NumericValue)
            .ThenBy(x => x.StringValue);

        Votes = parsedVotes.ToDictionary(x => x.StringValue, x => x.Count);

        if (Votes.Any())
        {
            Min = parsedVotes.First().StringValue;
            Max = parsedVotes.Last().StringValue;

            if (parsedVotes.Where(x => x.NumericValue.HasValue).Any())
            {
                Average = parsedVotes
                    .Where(x => x.NumericValue.HasValue)
                    .Average(x => x.NumericValue!.Value)
                    .ToString("0");
            }

            // Don't render the popular vote if everyone voted differently
            if (GameState.Value.Votes.Count == 1 || parsedVotes.Count() != GameState.Value.Votes.Count)
            {
                Popular = parsedVotes.OrderByDescending(x => x.Count).First().StringValue;
            }
        }

        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Votes.Any())
        {
            await JSRuntime.InvokeVoidAsync(
                "scrummyJS.drawChart",
                WrapperElementId,
                Votes);
        }
    }
}
