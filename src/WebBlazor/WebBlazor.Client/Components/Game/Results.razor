@inherits FluxorComponent
@inject IState<GameState> GameState
@inject IJSRuntime JSRuntime

<div class="flex flex-col gap-8 sm:gap-16 items-center">
    <div class="grid grid-cols-4 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <ResultsAggregate Label="Min" Card="@Min" />
        <ResultsAggregate Label="Max" Card="@Max" />
        <ResultsAggregate Label="Popular" Card="@Popular" />
        <ResultsAggregate Label="Average" Value="@Average" />
    </div>
    @if (Votes.Any())
    {
        <div class="w-full px-16 sm:p-0 lg:w-96 md:w-80 sm:w-72 overflow-hidden">
            <canvas id="@WrapperElementId"></canvas>
        </div>
    }
    else
    {
        <p class="text-center text-white text-lg font-semibold">No votes to tally!</p>
    }
</div>

@code {
    private string WrapperElementId = Guid.NewGuid().ToString();
    private Dictionary<string, int> Votes = new();
    private Card? Min;
    private Card? Max;
    private Card? Popular;
    private string? Average;

    protected override Task OnInitializedAsync()
    {
        var groupedVotes = GameState.Value.Votes.Select(v => v.Value)
            .GroupBy(v => v)
            .Select(g => new
            {
                Card = GameState.Value.Deck.First(c => c.Id == g.Key),
                Count = g.Count()
            })
            .OrderByDescending(x => x.Card.NumericValue.HasValue)
            .ThenBy(x => x.Card.NumericValue)
            .ThenBy(x => x.Card.Label);

        if (groupedVotes.Any())
        {
            Votes = groupedVotes.ToDictionary(x => x.Card.Label, x => x.Count);
            Min = groupedVotes.First().Card;
            Max = groupedVotes.Last().Card;

            if (groupedVotes.Where(x => x.Card.NumericValue.HasValue).Any())
            {
                var average = groupedVotes
                    .Where(x => x.Card.NumericValue.HasValue)
                    .Average(x => x.Card.NumericValue!.Value);

                // Round to nearest half
                Average = (Math.Round(average * 2, MidpointRounding.AwayFromZero) / 2).ToString("0.#");
            }

            // Don't render the popular vote if everyone voted differently
            if (GameState.Value.Votes.Count == 1 || groupedVotes.Count() != GameState.Value.Votes.Count)
            {
                Popular = groupedVotes.OrderByDescending(x => x.Count).First().Card;
            }
        }

        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && Votes.Any())
        {
            await JSRuntime.InvokeVoidAsync(
                "scrummyJS.drawChart",
                WrapperElementId,
                Votes);
        }
    }
}
