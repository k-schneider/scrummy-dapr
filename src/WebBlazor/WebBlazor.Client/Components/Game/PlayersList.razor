@inherits FluxorComponent
@inject IDispatcher Dispatcher
@inject IState<GameState> GameState

<div class="flex flex-col bg-indigo-400 p-2 pt-1 h-80 rounded-lg shadow-md">
    <div class="text-center shrink-0 text-indigo-800 font-bold text-sm">Players</div>
    <div class="mt-2 grow overflow-auto">
        @foreach (var player in GameState.Value.Players.OrderByDescending(p => p.IsHost).ThenBy(p => p.Nickname))
        {
            <div class="px-2 py-2 even:bg-indigo-300/50 flex space-x-2 items-center">
                @if (!player.IsConnected)
                {
                    <Icon Type="circle-xmark" Class="text-slate-500 text-2xl opacity-50" />
                }
                else if (GameState.Value.Votes.ContainsKey(player.PlayerId))
                {
                    <Icon Type="circle-check" Class="text-emerald-700 text-2xl" />
                }
                else
                {
                    <Icon Type="circle-notch" Spin="true" Class="text-white opacity-50 text-2xl" />
                }
                <span class="text-xl @(player.IsConnected ? "" : "opacity-50")">@player.Nickname</span>
                @if (player.IsHost)
                {
                    <Icon Type="crown" Class="text-amber-600 text-xs" Title="Host" />
                }
                @if (player.PlayerId != GameState.Value.PlayerId && (player.IsConnected || GameState.Value.IsHost()))
                {
                    <div class="relative !ml-auto">
                        <button @onclick="() => OpenOtherPlayerMenu(player.PlayerId)" class="rounded-full hover:bg-black/10 p-1 text-slate-700 rounded-full hover:bg-black/10 p-1 text-slate-700 text-xl w-8 h-8 flex items-center justify-center">
                            <Icon Type="ellipsis-vertical" />
                        </button>

                        @if (GameState.Value.OtherPlayerIdMenuOpen == player.PlayerId)
                        {
                            <Backdrop OnClick="CloseOtherPlayerMenu" />
                            <OtherPlayerMenu PlayerId="@player.PlayerId" />
                        }
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private void CloseOtherPlayerMenu()
    {
        Dispatcher.Dispatch(new CloseOtherPlayerMenuAction());
    }

    private void OpenOtherPlayerMenu(int playerId)
    {
        Dispatcher.Dispatch(new OpenOtherPlayerMenuAction(playerId));
    }
}
