@inherits FluxorComponent
@implements IDisposable
@inject IDispatcher Dispatcher
@inject IState<GameState> GameState

<PageTitle>Scrummy - Playing</PageTitle>

@if (GameState.Value.Connecting)
{
    <CenteredText>Connecting to game...</CenteredText>
}
else if (GameState.Value.Connected)
{
    if (GameState.Value.GamePhase is null)
    {
        <CenteredText>Waiting for game state...</CenteredText>
    }
    else if (GameState.Value.ConnectionClosed)
    {
        <ConnectionClosed />
    }
    else
    {
        <div class="@(GameState.Value.Nudged ? "shake-hard shake-constant" : null)">
            <div class="mb-24 sm:mb-12">
                <div class="flex justify-between py-4 px-4 md:px-8">
                    <InviteButton />
                    <PlayerButton />
                </div>

                <div class="flex flex-col sm:flex-row">

                    <div class="sm:grow p-2 sm:p-4 md:p-8">

                        @if (GameState.Value.GamePhase == GamePhases.Voting)
                        {
                            <Voting />
                        }

                        @if (GameState.Value.GamePhase == GamePhases.Results)
                        {
                            <Results />
                        }

                    </div>

                    <div class="shrink-0 w-full sm:w-72 md:w-96 flex flex-row sm:flex-col gap-x-2 sm:gap-x-0 sm:gap-y-4 p-4 md:p-8">
                        <div class="flex-1 sm:flex-none">
                            <PlayersList />
                        </div>
                        <div class="flex-1 sm:flex-none">
                            <GameLog />
                        </div>
                    </div>

                </div>
            </div>

            @if (GameState.Value.IsHost())
            {
                <HostControls />
            }
        </div>

        @if (GameState.Value.Nudged && !GameState.Value.MuteNudges)
        {
            <audio autoplay><source src="sounds/door_bell.mp3" /></audio>
        }
    }
}

@code {
    [Parameter]
    public string GameId { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        Dispatcher.Dispatch(new ConnectToGameAction(GameId));
        await base.OnInitializedAsync();
    }

    void IDisposable.Dispose()
    {
        Dispatcher.Dispatch(new DisconnectFromGameAction());
    }
}
