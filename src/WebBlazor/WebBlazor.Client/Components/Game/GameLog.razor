@inherits FluxorComponent
@inject IState<GameState> GameState
@inject IJSRuntime JSRuntime

<div class="flex flex-col bg-stone-400 p-2 pt-1 h-80 sm:h-96 rounded-lg text-sm shadow-md">
    <div class="text-center shrink-0 text-stone-800 font-bold">Game Log</div>
    <div id="@WrapperElementId" class="mt-2 grow overflow-auto">
        @foreach (var logEntry in GameState.Value.Log)
        {
            <p @key="@logEntry.Id" class="leading-tight px-2 py-1 even:bg-stone-300/50 flex flex-col">
                <span class="text-xs opacity-75">@DateTimeOffset.FromUnixTimeMilliseconds(logEntry.Timestamp).ToLocalTime().ToString("h:mm:ss tt")</span>
                <span>@logEntry.Message</span>
            </p>
        }
    </div>
</div>

@code {
    private string WrapperElementId = Guid.NewGuid().ToString();
    private bool KeepScrolledToBottom = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync(
                "scrummyJS.watchScroll",
                WrapperElementId,
                DotNetObjectReference.Create(this),
                "ScrollChanged");
        }
        else if (KeepScrolledToBottom)
        {
            await JSRuntime.InvokeVoidAsync(
                "scrummyJS.scrollToBottom",
                WrapperElementId);
        }
    }

    [JSInvokable]
    public void ScrollChanged(bool bottom)
    {
        KeepScrolledToBottom = bottom;
    }
}
