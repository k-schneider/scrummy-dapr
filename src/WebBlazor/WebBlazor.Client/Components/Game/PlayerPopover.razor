@inherits FluxorComponent
@inject IDispatcher Dispatcher
@inject IState<GameState> GameState

<div class="absolute right-0 mt-2 w-80 sm:w-96 bg-white rounded-md shadow-xl z-20 flex flex-col">
    <div class="flex flex-col gap-y-2 p-4">
        <label class="w-full text-center text-lg font-semibold" for="nickname">Nickname</label>
        <Input Id="nickname" Name="nickname" @bind-Value="Nickname" MaxLength="50" Block="true" Placeholder="Enter your nickname" />
        <div>
            <Button OnClick="UpdateNickname" Icon="pencil-alt" Block="true" Disabled="@GameState.Value.UpdatingNickname" Loading="@GameState.Value.UpdatingNickname">Update Your Nickname</Button>
        </div>
    </div>
    <div class="bg-stone-200 p-4 flex flex-col gap-4">
        <p class="w-full text-center text-lg font-semibold">Player Settings</p>
        <div class="flex flex-col gap-4">
            <Toggle Checked="Spectating" CheckedChanged="SpectatingChanged" Label="Spectator mode (opt-out of voting)" />
            <Toggle Checked="MuteNudges" CheckedChanged="MuteNudgesChanged" Label="Mute nudge sound effects" />
        </div>
    </div>
    <div class="p-4">
        <Button OnClick="LeaveGame" Icon="arrow-right-from-bracket" Block="true" Disabled="@GameState.Value.Leaving" Loading="@GameState.Value.Leaving">Leave Game</Button>
    </div>
</div>

@code {
    private bool MuteNudges = false;
    private bool Spectating = false;
    private string Nickname = string.Empty;

    protected override Task OnInitializedAsync()
    {
        Nickname = GameState.Value.Me()!.Nickname;
        Spectating = GameState.Value.Me()!.IsSpectator;
        return base.OnInitializedAsync();
    }

    private void LeaveGame()
    {
        Dispatcher.Dispatch(new LeaveGameAction());
    }

    private void UpdateNickname()
    {
        if (GameState.Value.Me()!.Nickname == Nickname)
        {
            // Name didn't change so just close the popover
            Dispatcher.Dispatch(new ClosePlayerPopoverAction());
            return;
        }

        Dispatcher.Dispatch(new UpdateNicknameAction(Nickname));
    }

    private void SpectatingChanged(bool value)
    {
        @if (!GameState.Value.SpectateChanging)
        {
            Spectating = value;

            if (value)
            {
                Dispatcher.Dispatch(new StartSpectatingAction());
            }
            else
            {
                Dispatcher.Dispatch(new StopSpectatingAction());
            }
        }
    }

    private void MuteNudgesChanged(bool value)
    {
        MuteNudges = value;
        Dispatcher.Dispatch(new UpdateMuteNudgesAction(value));
    }
}
