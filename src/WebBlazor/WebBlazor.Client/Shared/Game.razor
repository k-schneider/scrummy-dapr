@inherits FluxorComponent
@implements IDisposable
@inject IDispatcher Dispatcher
@inject IState<GameState> GameState

<PageTitle>Scrummy - Playing</PageTitle>

<div>The actual Game</div>
<div>
    @foreach (var card in GameState.Value.Deck)
    {
        <button class="m-2 p-3 bg-white border-2 @(card == GameState.Value.Vote ? "border-red-500" : "border-transparent")" @onclick="() => Vote(card)">@card</button>
    }
</div>

<button @onclick="LeaveGame">Leave Game</button>

<hr>
<GameLog />

@code {
    [Parameter]
    public string GameId { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        Dispatcher.Dispatch(new ConnectToGameAction(GameId));
        await base.OnInitializedAsync();
    }

    private void Vote(string card)
    {
        if (GameState.Value.Voting)
        {
            return;
        }

        if (card == GameState.Value.Vote)
        {
            Dispatcher.Dispatch(new RecallVoteAction());
        }
        else
        {
            Dispatcher.Dispatch(new CastVoteAction(card));
        }
    }

    private void LeaveGame()
    {
        Dispatcher.Dispatch(new LeaveGameAction(GameId));
    }

    void IDisposable.Dispose()
    {
        Dispatcher.Dispatch(new DisconnectFromGameAction());
    }
}
