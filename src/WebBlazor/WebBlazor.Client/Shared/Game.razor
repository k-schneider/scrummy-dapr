@inherits FluxorComponent
@implements IDisposable
@inject IDispatcher Dispatcher
@inject IState<GameState> GameState

<PageTitle>Scrummy - Playing</PageTitle>

@if (GameState.Value.Connecting)
{
    <div class="flex h-screen justify-center items-center">
        <p class="text-center text-white text-lg font-semibold">Connecting to game...</p>
    </div>
}
else if (GameState.Value.Connected)
{
    if (GameState.Value.InSync)
    {
        <div class="flex justify-between py-4 px-8">
            <button class="flex justify-center items-center space-x-2 bg-orange-600 text-slate-200 text-lg font-bold py-2 px-6 border-b-4 border-orange-800 hover:bg-orange-500 hover:border-orange-700 active:mt-1 active:border-b-0 rounded-lg drop-shadow-md">
                <span>Invite</span>
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M2.94 6.412A2 2 0 002 8.108V16a2 2 0 002 2h12a2 2 0 002-2V8.108a2 2 0 00-.94-1.696l-6-3.75a2 2 0 00-2.12 0l-6 3.75zm2.615 2.423a1 1 0 10-1.11 1.664l5 3.333a1 1 0 001.11 0l5-3.333a1 1 0 00-1.11-1.664L10 11.798 5.555 8.835z" clip-rule="evenodd" />
                </svg>
            </button>

            <button class="flex justify-center items-center space-x-2 bg-orange-400 text-slate-800 text-lg font-bold py-2 px-6 border-b-4 border-orange-500 hover:bg-orange-300 hover:border-orange-400 active:mt-1 active:border-b-0 rounded-lg drop-shadow-md">
                <span>Kevin</span>
                <svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM7 9a1 1 0 100-2 1 1 0 000 2zm7-1a1 1 0 11-2 0 1 1 0 012 0zm-.464 5.535a1 1 0 10-1.415-1.414 3 3 0 01-4.242 0 1 1 0 00-1.415 1.414 5 5 0 007.072 0z" clip-rule="evenodd" />
                </svg>
            </button>
        </div>

        <div class="flex">

            <div class="grow p-8">

                @if (GameState.Value.GamePhase == "Voting")
                {
                    <div class="flex justify-center items-center">
                        <div class="bg-white rounded-lg text-2xl text-gray-800 py-2 px-4 font-semibold drop-shadow-md">
                            Cast your vote...
                        </div>
                    </div>

                    <div class="flex flex-wrap justify-center mt-4">
                        @foreach (var card in GameState.Value.Deck)
                        {
                            <button class="transition-all ease-in-out drop-shadow-md select-none cursor-pointer bg-white rounded-xl flex m-2 h-32 w-20 lg:h-44 lg:w-28 text-4xl lg:text-5xl text-gray-800 flex items-center justify-center focus:outline-none border-8 hover:mt-1 hover:drop-shadow-xl @(card == MyVote ? "border-orange-500 mt-1" : "border-transparent")" @onclick="() => Vote(card)">@card</button>
                        }
                    </div>

                    <!--<button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" @onclick="LeaveGame">Leave Game</button>-->
                }

                @if (GameState.Value.GamePhase == "Results")
                {
                    foreach (var vote in GameState.Value.Votes)
                    {
                        <p>@vote.Key voted @vote.Value</p>
                    }
                }

            </div>

            <div class="shrink-0 w-96 flex flex-col space-y-4 p-8">

                <div class="flex flex-col bg-indigo-400 p-2 pt-1 h-80 rounded-lg drop-shadow-md">
                    <div class="text-center shrink-0 text-indigo-800 font-bold text-sm">Players</div>
                    <div class="mt-2 grow overflow-auto">
                        @foreach (var player in GameState.Value.Players)
                        {
                            <div class="px-2 py-2 even:bg-indigo-300/50 flex space-x-2 items-center">
                                @if (!player.IsConnected)
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-white bg-slate-500 rounded-full opacity-25" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                    </svg>
                                }
                                else if (GameState.Value.Votes.ContainsKey(player.PlayerId))
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-white bg-emerald-500 rounded-full" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M5 13l4 4L19 7" />
                                    </svg>
                                }
                                else
                                {
                                    <svg class="animate-spin h-6 w-6 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                    </svg>
                                }
                                <span class="grow text-xl @(player.IsConnected ? "" : "opacity-50")">@player.Nickname</span>
                                <button class="rounded-full hover:bg-black/10 p-1 text-slate-700">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z" />
                                    </svg>
                                </button>
                            </div>
                        }
                    </div>
                </div>

                <div class="flex flex-col bg-stone-400 p-2 pt-1 h-96 rounded-lg text-sm drop-shadow-md">
                    <div class="text-center shrink-0 text-stone-800 font-bold">Game Log</div>
                    <div class="mt-2 grow overflow-auto">
                        @foreach (var logEntry in GameState.Value.Log)
                        {
                            <p @key="@logEntry.Id" class="leading-tight px-2 py-1 even:bg-stone-300/50">
                                <span class="text-xs opacity-75">@DateTimeOffset.FromUnixTimeMilliseconds(logEntry.Timestamp).ToLocalTime().ToString("h:mm:ss tt")</span>
                                <br>
                                <span>@logEntry.Message</span>
                            </p>
                        }
                    </div>
                </div>

            </div>

        </div>

        @if (IsHost)
        {
            <div class="fixed bottom-0 flex space-x-2 py-4 px-8">
                @if (GameState.Value.GamePhase == "Voting")
                {
                    <button class="flex justify-center items-center space-x-2 bg-amber-600 text-slate-200 text-lg font-bold py-2 px-6 border-b-4 border-amber-800 hover:bg-amber-500 hover:border-amber-700 active:mt-1 active:border-b-0 rounded-lg drop-shadow-md" @onclick="FlipCards">
                        Flip Cards
                    </button>
                    <button class="flex justify-center items-center space-x-2 bg-amber-600 text-slate-200 text-lg font-bold py-2 px-6 border-b-4 border-amber-800 hover:bg-amber-500 hover:border-amber-700 active:mt-1 active:border-b-0 rounded-lg drop-shadow-md" @onclick="ResetVotes">
                        Reset Votes
                    </button>
                }

                @if (GameState.Value.GamePhase == "Results")
                {
                    <button class="flex justify-center items-center space-x-2 bg-amber-600 text-slate-200 text-lg font-bold py-2 px-6 border-b-4 border-amber-800 hover:bg-amber-500 hover:border-amber-700 active:mt-1 active:border-b-0 rounded-lg drop-shadow-md" @onclick="PlayAgain">
                        Play Again
                    </button>
                }
            </div>
        }
    }
    else
    {
        <div class="flex h-screen justify-center items-center">
            <p class="text-center text-white text-lg font-semibold">Waiting for game state...</p>
        </div>
    }
}

@code {
    [Parameter]
    public string GameId { get; set; } = null!;

    private Player Me => GameState.Value.Players
        .First(p => p.PlayerId == GameState.Value.PlayerId);

    private bool IsHost => Me.IsHost;

    private string? MyVote
    {
        get
        {
            GameState.Value.Votes.TryGetValue(Me.PlayerId, out var vote);
            return vote;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Dispatcher.Dispatch(new ConnectToGameAction(GameId));
        await base.OnInitializedAsync();
    }

    private void FlipCards()
    {
        Dispatcher.Dispatch(new FlipCardsAction());
    }

    private void LeaveGame()
    {
        Dispatcher.Dispatch(new LeaveGameAction());
    }

    private void PlayAgain()
    {
        Dispatcher.Dispatch(new PlayAgainAction());
    }

    private void ResetVotes()
    {
        Dispatcher.Dispatch(new ResetVotesAction());
    }

    private void Vote(string card)
    {
        if (GameState.Value.Voting)
        {
            return;
        }

        if (card == MyVote)
        {
            Dispatcher.Dispatch(new RecallVoteAction());
        }
        else
        {
            Dispatcher.Dispatch(new CastVoteAction(card));
        }
    }

    void IDisposable.Dispose()
    {
        Dispatcher.Dispatch(new DisconnectFromGameAction());
    }
}
