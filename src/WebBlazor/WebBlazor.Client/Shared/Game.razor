@inherits FluxorComponent
@implements IDisposable
@inject IDispatcher Dispatcher
@inject IState<GameState> GameState

<PageTitle>Scrummy - Playing</PageTitle>

@if (GameState.Value.Connecting)
{
    <CenteredText>Connecting to game...</CenteredText>
}
else if (GameState.Value.Connected)
{
    if (GameState.Value.InSync)
    {
        <div class="mb-24 sm:mb-12">
            <div class="flex justify-between py-4 px-4 md:px-8">
                <InviteButton />
                <PlayerButton />
            </div>

            <div class="flex flex-col sm:flex-row">

                <div class="sm:grow p-2 sm:p-4 md:p-8">

                    @if (GameState.Value.GamePhase == "Voting")
                    {
                        <Voting />
                    }

                    @if (GameState.Value.GamePhase == "Results")
                    {
                        <Results />
                    }

                </div>

                <div class="shrink-0 w-full sm:w-72 md:w-96 flex flex-row sm:flex-col space-x-2 sm:space-x-0 sm:space-y-4 p-4 md:p-8">
                    <div class="flex-1 sm:flex-none">
                        <PlayersList />
                    </div>
                    <div class="flex-1 sm:flex-none">
                        <GameLog />
                    </div>
                </div>

            </div>
        </div>

        <IfHost>
            <HostControls />
        </IfHost>
    }
    else
    {
        <CenteredText>Waiting for game state...</CenteredText>
    }
}

@code {
    [Parameter]
    public string GameId { get; set; } = null!;

    private bool IsHost => GameState.Value.Players
        .First(p => p.PlayerId == GameState.Value.PlayerId)
        .IsHost;

    protected override async Task OnInitializedAsync()
    {
        Dispatcher.Dispatch(new ConnectToGameAction(GameId));
        await base.OnInitializedAsync();
    }

    void IDisposable.Dispose()
    {
        Dispatcher.Dispatch(new DisconnectFromGameAction());
    }
}
