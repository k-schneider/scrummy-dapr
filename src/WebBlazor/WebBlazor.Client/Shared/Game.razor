@inherits FluxorComponent
@implements IDisposable
@inject IDispatcher Dispatcher
@inject IState<GameState> GameState

<PageTitle>Scrummy - Playing</PageTitle>

@if (GameState.Value.Connecting)
{
    <text>Connecting to game...</text>
}
else if (GameState.Value.Connected)
{
    if (GameState.Value.InSync)
    {
        <div>The actual Game</div>
        <div>
            @foreach (var card in GameState.Value.Deck)
            {
                <button class="m-2 p-3 bg-white border-2 @(card == MyVote ? "border-red-500" : "border-transparent")" @onclick="() => Vote(card)">@card</button>
            }
        </div>

        <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" @onclick="LeaveGame">Leave Game</button>

        @if (IsHost)
        {
            <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" @onclick="ClearVotes">Clear Votes</button>

            <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" @onclick="FlipCards">Flip Cards</button>
        }

        <hr>
        <GameLog />
    }
    else
    {
        <text>Waiting for game state...</text>
    }
}

@code {
    [Parameter]
    public string GameId { get; set; } = null!;

    private Player Me => GameState.Value.Players
        .First(p => p.PlayerId == GameState.Value.PlayerId);

    private bool IsHost => Me.IsHost;

    private string? MyVote
    {
        get
        {
            GameState.Value.Votes.TryGetValue(Me.PlayerId, out var vote);
            return vote;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Dispatcher.Dispatch(new ConnectToGameAction(GameId));
        await base.OnInitializedAsync();
    }

    private void ClearVotes()
    {

    }

    private void FlipCards()
    {
        Dispatcher.Dispatch(new FlipCardsAction());
    }

    private void Vote(string card)
    {
        if (GameState.Value.Voting)
        {
            return;
        }

        if (card == MyVote)
        {
            Dispatcher.Dispatch(new RecallVoteAction());
        }
        else
        {
            Dispatcher.Dispatch(new CastVoteAction(card));
        }
    }

    private void LeaveGame()
    {
        Dispatcher.Dispatch(new LeaveGameAction());
    }

    void IDisposable.Dispose()
    {
        Dispatcher.Dispatch(new DisconnectFromGameAction());
    }
}
