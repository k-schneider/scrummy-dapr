<input type="text" @bind="Value" name="@Name" id="@Id" maxlength="@MaxLength" placeholder="@Placeholder" readonly="@(ReadOnly ? "readonly" : null)" class="text-2xl bg-gray-50 border border-gray-300 text-gray-900 rounded-lg focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500 p-2.5 @ClassList">

@code {
    private string ClassList = string.Empty;

    [Parameter]
    public string? Id { get; set;}

    [Parameter]
    public string? Name { get; set; }

    [Parameter]
    public string? Placeholder { get; set; }

    [Parameter]
    public int? MaxLength { get; set; }

    [Parameter]
    public string? Class { get; set; }

    [Parameter]
    public bool Block { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    [Parameter]
    public string? Value
    {
        get => _value;
        set
        {
            if (_value != value)
            {
                _value = value;
                ValueChanged.InvokeAsync(value);
            }
        }
    }
    private string? _value;

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        BuildClassList();
    }

    private void BuildClassList()
    {
        var classList = new List<string>();

        if (Block)
        {
            classList.Add("block w-full");
        }

        if (!string.IsNullOrEmpty(Class))
        {
            classList.Add(Class);
        }

        ClassList = string.Join(' ', classList);
    }
}
